@page "/clients"
@inject IClientService ClientService
@attribute [Authorize]
@implements IDisposable
@inject NavigationManager NavigationManager


<h3>Clients</h3>
<div class="header">
    <div class="col-small" >Id</div>
    <div class="col">Name</div>
    <div class="col">Surname</div>
    <div class="col">Email</div>
    <div class="col">Phone</div>
    <div class="col"></div>
</div>

@foreach (var client in ClientService.Clients)
{
    @if(client.Editing)
    {
        <EditForm Model="editingClient" OnSubmit="UpdateClient">
            <div class="row">
                <div class="col-small">
                    @editingClient.Id
                </div>
                <div class="col">
                    <InputText @bind-Value="editingClient.Name" class="form-control"></InputText>
                </div>
                <div class="col">
                    <InputText @bind-Value="editingClient.Surname" class="form-control"></InputText>
                </div>
                <div class="col">
                    <InputText @bind-Value="editingClient.Email" class="form-control"></InputText>
                </div>
                <div class="col">
                    <InputText @bind-Value="editingClient.PhoneNumber" class="form-control"></InputText>
                </div>

                <div class="col">
                    <button type="submit" class="btn btn-primary">
                        <i class="oi oi-cloud-upload"></i>
                    </button>
                    <button class="btn btn-primary" @onclick="CancelEditing">
                        <i class="oi oi-circle-x"></i>
                    </button>
                </div>
            </div>
        </EditForm>
    }
    else {
        <div class="row">
            <div class="col-small">
                @client.Id
            </div>
            <div class="col">
                @client.Name
            </div>
            <div class="col">
                @client.Surname
            </div>
            <div class="col">
                @client.Email
            </div>
            <div class="col">
                @client.PhoneNumber
            </div>
            <div class="col">
                <button class="btn btn-primary" @onclick="(() => EditClient(client))">
                    <i class="oi oi-pencil"></i>
                </button>
                <button class="btn btn-primary" @onclick="(() => DeleteClient(client.Id))">
                    <i class="oi oi-trash"></i>
                </button>
            </div>
        </div>
    }
}

<button class="btn btn-primary" @onclick="CreateNewClient">
    <i class="oi oi-plus"></i> Add new client
</button>

@code {
    Client editingClient = null;

    protected override void OnInitialized()
    {
        ClientService.ClientsChanged += StateHasChanged;
    }
    public void Dispose()
    {
        ClientService.ClientsChanged -= StateHasChanged;
    }
    protected override async Task OnParametersSetAsync()
    {
        await ClientService.GetClients();
    }

    private void CreateNewClient()
    {
        editingClient = ClientService.CreateNewClient();
    }

    private void EditClient(Client client)
    {
        client.Editing = true;
        editingClient = client;
    }

    private async Task UpdateClient()
    {
        if (editingClient.IsNew)
        {
            await ClientService.AddClient(editingClient);
        }
        else 
        {
            await ClientService.UpdateClient(editingClient);
        }
        editingClient = new OMS.Shared.Client();
        await ClientService.GetClients();
    }

    private async Task CancelEditing()
    {
        editingClient = new OMS.Shared.Client();
        await ClientService.GetClients();
    }

    private async Task DeleteClient(int id)
    {
        await ClientService.RemoveClient(id);
    }
}
