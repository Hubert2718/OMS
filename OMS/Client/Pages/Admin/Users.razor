@page "/admin/users"
@inject IUserService UserService
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable
@inject NavigationManager NavigationManager


<h3>Users</h3>
<div class="header">
    <div class="col-small" >Id</div>
    <div class="col">Email</div>
    <div class="col">Role</div>
    <div class="col">IsActive</div>
    <div class="col"></div>
</div>

@foreach (var user in UserService.Users)
{
    @if(user.Editing)
    {
        <EditForm Model="editingUser" OnSubmit="UpdateUser">
            <div class="row">
                <div class="col-small">
                    @editingUser.Id
                </div>
                <div class="col">
                    <InputText @bind-Value="editingUser.Email" class="form-control"></InputText>
                </div>
                <div class="col">
                    <InputSelect @bind-Value="editingUser.Role" class="form-control">
                        @foreach(var role in UserService.Roles)
                        {
                            <option>@role</option>
                        }
                    </InputSelect>
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="editingUser.Active" style="transform: scale(2,2);"></InputCheckbox>
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-primary">
                        <i class="oi oi-cloud-upload"></i>
                    </button>
                    <button class="btn btn-primary" @onclick="CancelEditing">
                        <i class="oi oi-circle-x"></i>
                    </button>
                </div>
            </div>
        </EditForm>
    }
    else {
        <div class="row">
            <div class="col-small">
                @user.Id
            </div>
            <div class="col">
                @user.Email
            </div>
            <div class="col">
                @user.Role
            </div>
            <div class="col col-visible">
                <span>@(user.Active ? "✔️" : "❌")</span>
            </div>
            <div class="col">
                <button class="btn btn-primary" @onclick="(() => EditUser(user))">
                    <i class="oi oi-pencil"></i>
                </button>
                <button class="btn btn-primary" @onclick="(() => DeleteUser(user.Id))">
                    <i class="oi oi-trash"></i>
                </button>
            </div>
        </div>
    }
}

<button class="btn btn-primary" @onclick="CreateNewUser">
    <i class="oi oi-plus"></i> Add new user
</button>

@code {
    User editingUser = null;

    protected override async Task OnInitializedAsync()
    {
        await UserService.GetUsers();
        UserService.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        UserService.OnChange -= StateHasChanged;
    }
    protected override async Task OnParametersSetAsync()
    {
        await UserService.GetUsers();
    }

    private void CreateNewUser()
    {
        NavigationManager.NavigateTo("admin/register");
    }

    private void EditUser(User user)
    {
        user.Editing = true;
        editingUser = user;
    }

    private async Task UpdateUser()
    {
        if(editingUser.IsNew)
        {
            await UserService.AddUser(editingUser);
        }
        else 
        {
            await UserService.UpdateUser(editingUser);
        }
        editingUser = new User();
    }

    private async Task CancelEditing()
    {
        editingUser = new User();
        await UserService.GetUsers();
    }

    private async Task DeleteUser(int id)
    {
        await UserService.DeleteUser(id);
    }
}
