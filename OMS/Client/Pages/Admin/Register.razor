@page "/admin/register"
@inject IAuthService AuthService
@inject IUserService UserService
@attribute [Authorize]

<PageTitle>Register</PageTitle>

<h3>Register</h3>

<EditForm Model="user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="user.Email" class="form-control" />
            <ValidationMessage For="@(() => user.Email)"/>
        </div>
        <div class="col">
            <label for="password">Password</label>
            <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <label for="confirmpassword">Confirm Password</label>
            <InputText id="confirmpassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password" />
            <ValidationMessage For="@(() => user.ConfirmPassword)" />
        </div>
        <div class="col">
            <label for="role">Role</label>
            <InputSelect id="role" @bind-Value="user.Role" class="form-control">
                @foreach (var role in UserService.Roles)
                {
                    <option>@role</option>
                }
            </InputSelect>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
    <div class="@messageCssClass">
        <span>@message</span>
    </div>
    <ValidationSummary />
</EditForm>

@code {
    UserRegister user = new UserRegister();

    string message = string.Empty;
    string messageCssClass = string.Empty;

    async Task HandleRegistration()
    {
        var result = await AuthService.Register(user);
        message = result.Message;

        if (!result.Success)
            messageCssClass = "text-danger";
        else
            messageCssClass = "text-success";
    }
}
